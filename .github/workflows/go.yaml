# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go
name: Build and Release on Tag
on:
  push:
    tags:
      - 'v*' # 只在以 'v' 开头的标签推送时触发
# on:
#   push:
#     branches:
#       - 'main' # 只在主分支上推送时触发
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.22"]
        os: [linux, darwin]
        platform: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: Install dependencies
        run: go mod tidy
        shell: bash
      - name: Build files
        run: |
          for plat in ${{ matrix.platform }}; do
            echo "Building for OS: ${{ matrix.os }}, ARCH: $plat"
            GOOS=${{ matrix.os }} GOARCH=$plat go build -v -o filemgr-${{ matrix.os }}-$plat ./filemgr
            GOOS=${{ matrix.os }} GOARCH=$plat go build -v -o launch-${{ matrix.os }}-$plat ./launch
            GOOS=${{ matrix.os }} GOARCH=$plat go build -v -o structset-${{ matrix.os }}-$plat ./structset
          done
          ls -lah
        shell: bash
      - name: Archive production artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: myapps-${{ matrix.os }}-${{ matrix.platform }}
          path: |
            filemgr-${{ matrix.os }}-${{ matrix.platform }}
            launch-${{ matrix.os }}-${{ matrix.platform }}
            structset-${{ matrix.os }}-${{ matrix.platform }}
  release:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin]
        platform: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: myapps-${{ matrix.os }}-${{ matrix.platform }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: List generated files
        run: ls -lah
        shell: bash
      - name: Upload filemgr
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: filemgr-${{ matrix.os }}-${{ matrix.platform }}
          asset_name: filemgr-${{ matrix.os }}-${{ matrix.platform }}
          asset_content_type: application/octet-stream
      - name: Upload launch
        uses: actions/upload-release-asset@v2
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: launch-${{ matrix.os }}-${{ matrix.platform }}
          asset_name: launch-${{ matrix.os }}-${{ matrix.platform }}
          asset_content_type: application/octet-stream
      - name: Upload structset
        uses: actions/upload-release-asset@v2
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: structset-${{ matrix.os }}-${{ matrix.platform }}
          asset_name: structset-${{ matrix.os }}-${{ matrix.platform }}
          asset_content_type: application/octet-stream
